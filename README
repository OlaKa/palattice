******************* libpalattice ***********************************
         C++ particle accelerator lattice libraray
	 
This is unpublished testing software. Please do not copy/distribute it
without prior agreement of the author.
Open Source publication coming soon :-)

(c) Jan Schmidt <schmidt@physik.uni-bonn.de>, 2016
********************************************************************



Please report bugs and do not hesitate to contact me if you have any questions.


--------------------------------------------------------------------------
If you used convertlattice before:
--------------------------------------------------------------------------
If you used the statically compiled convertlattice program before,
please first uninstall this by execution of the "uninstall.sh" script from
your convertlattice directory.
It is also recommended to delete the existing "libpal.ele"/"libpal.madx"
files in your projects to avoid confusion, because the library ignores the
old files and creates "libpalattice.ele"/"libpalattice.madx" instead
during first Mad-X/Elegant execution in this directory.
If you made any custom changes you should copy them to the new files.



--------------------------------------------------------------------------
Requirements: libSDDS1
--------------------------------------------------------------------------
From version 3.7.2, libpalattice can read SDDS binary files directly, which
are the default output of Elegant. This requires libSDDS1 by the
SDDS/Elegant developers from Argonne National Lab.
A package called "SDDSToolKit-devel" can be downloaded at
www.aps.anl.gov/Accelerator_Systems_Division/Accelerator_Operations_Physics/software.shtml
If you have any questions about it, I recommend asking in the Elegant forum:
www.aps.anl.gov/Accelerator_Systems_Division/Accelerator_Operations_Physics/phpBB3/

cmake automatically detects, if libSDDS1 is installed on your system and deactivates
the SDDS support otherwise, so that you can still use libpalattice.
But I really recommend using SDDS :-)

Since version SDDSToolKit-devel-3.3.1-2 "Most of the important functions should
now be thread safe" (Elegant forum, "libSDDS and threads"). Using this, libpalattice
was successfully tested with a parallelized application.

If you installed or uninstalled "SDDSToolKit-devel" and cmake does not recognize,
try deleting libpalattice/build/CMakeCache.txt and then run "cmake .." again.



--------------------------------------------------------------------------
Installation
--------------------------------------------------------------------------
1) get a copy of the source code:
   "git clone git@elsafs1.physik.uni-bonn.de:lib/libpalattice"
   - requires git, in Ubuntu it can be installed via "sudo apt-get install git"
   - repository has to be unlocked for your user/computer:
     Send your ssh public key to schmidt@physik.uni-bonn.de
2) CMake is used to configure the project for your system and generate the build files.
   Go to directory libpalattice/build and run CMake by the command:
   "cmake .."
   - requires CMake, in Ubuntu it can be installed via "sudo apt-get install cmake"
   - libpalattice requires the Gnu Scientific Library GSL,
     in Ubuntu it can be installed via "sudo apt-get install libgsl0-dev"
   - the SDDS library libSDDS1 is recommended, see section above
3) compile the library:
   in libpalattice/build run
   "make"
3) install the library for all users of your system:
   in libpalattice/build type:
   "sudo make install"
   - the default install path is /usr/local and can be changed in
     libpalattice/CMakeLists.txt (look for "CMAKE_INSTALL_PREFIX")
4) compile example programs including convertlattice:
   in libpalattice/build type:
   "make programs"
   Now the binaries can be found in libpalattice/build/programs/src/programs-build/.
   They can be copied anywhere for execution.   
5) install convertlattice for all users of your system:
   "sudo make install" again
   Expert Info: convertlattice is linked against installed libpalattice. This is
   why its is build seperately ("make programs"). But it is installed during 
   'make install' if the binary exists.

4-5) Alternative:
   Alternatively, the example programs can be compiled from their own project folder:
   in libpalattice/programs/build run
   "cmake .."
   "make"
   The binaries are now located in libpalattice/programs/build.
   convertlattice can be installed here with
   "sudo make install"



--------------------------------------------------------------------------
Update
--------------------------------------------------------------------------
To get updated versions of the code just go to libpalattice directory
and type: "git pull"
If there are any changes compile and install them by going to the
build/ subdirectory again and typing:
"make", "sudo make install", "make programs", "sudo make install"


--------------------------------------------------------------------------
Uninstall
--------------------------------------------------------------------------
To remove all library files from the installation path (/usr/local)
go to libpalattice/build directory and type
"sudo make uninstall".
To remove all compiled files from the build directory type
"make clean".
To delete all source files just delete the libpalattice directory.


--------------------------------------------------------------------------
Requirements for automatic execution of Mad-X/Elegant by libpalattice
--------------------------------------------------------------------------
The commands to run Mad-X and Elegant can be set in libpalattice/config.hpp.
Default values are:
* command to run Mad-X: "madx"
* command to run Elegant: "elegant"


--------------------------------------------------------------------------
Comment on automatic execution of Mad-X/Elegant by libpalattice
--------------------------------------------------------------------------
To allow for automatic execution of Mad-X/Elegant, the library:
1. copies file libpalattice.madx/libpal.ele
   from /usr/local/lib/libpalattice_simTools/
   to the path of your lattice file if it does not exist there.
2. writes the name of your lattice file (and a few other settings)
   to libpalattice.madx/libpalattice.ele.
3. executes "madx libpalattice.madx" or "elegant libpalattice.elegant".
(4. if Elegant is used without libSDDS1) executes
   /usr/local/bin/elegant2libpalattice to convert SDDS files to ascii.

If execution fails for your lattice, you can edit libpalattice.madx/libpal.ele
in your lattice folder or edit the original template in
/usr/local/lib/libpalattice_simTools/.
E.g. for a beamline (no ring) MadX twiss module fails, because of missing
start values (betx, bety). Add them to the twiss command in libpalattice.madx
to run MadX successfully.

The manipulation of libpalattice.madx/libpalattice.ele is done really
quick-and-dirty so far (using sed...) and works only if "sed" is available!


--------------------------------------------------------------------------
Documentation of libpalattice API
--------------------------------------------------------------------------
Unfortunately there is no dedicated documentation yet.
If you have some time left over please send it to me...

A good start are the example programs in libpalattice/programs.
The .cpp files have many comments and show the basic usage of the classes.

For the full API I refer to the header files (.hpp) in libpalattice/,
where nearly all classes and methods are described by short comments.
Start with libpalattice.hpp, which is a kind of table of contents.

Please do not hesitate to contact me if you have any further questions.



--------------------------------------------------------------------------
Warning
--------------------------------------------------------------------------
Some main API features may still change due to ongoing development, so
there is no guarantee to full compatibility with new versions.
