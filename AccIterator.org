AccLattice elsa();

for(const_AccLatticeIterator it : elsa) {
  it.pos();
  it.element();
  it.element()->name;
 }

for(const_AccLatticeIterator it=elsa.begin(); it!=elsa.end(); it++) {
  it.pos();
  it.element();
  it.element()->name;
 }

const_AccLatticeIterator it = elsa.begin();
it = elsa.end();
it = elsa.rbegin();
AccElement* ele = elsa[pos];
it = elsa[name];

elsa[pos].element()->B();
elsa["M9"].pos(pal::begin);


for(const_AccLatticeIterator<pal::dipole> it : elsa) {
  ...
 }



* DONE it.pos();
* DONE it.element();
* DONE it.elementModifier();
* DONE it++;
* DONE it--;
* DONE it.next();
* DONE it.previous();
* DONE it.next(pal::quadrupole);
* DONE it.distance(pos, anchor);
* DONE range loop
* DONE it.revolve();
  - braucht begin & end !
* DONE it.pos(anchor);
  - braucht refPos !
  - it.begin();
  - it.center();
  - it.end();
* DONE it.at(pos);
  - braucht refPos !
  - ersetzt inside(): test, ob pos innerhalb dieses elements 
* DONE it.distanceRing(pos, anchor);
  - braucht circumference !
  - it.distanceNext();
* DONE End abfangen
* DONE plane & family
* DONE Ersatz für "firstIt" zum Beginn der Type-Iteration
* DONE AccTypeIterator<pal::quadrupole> it;
* DONE AccElement* lattice[pos]; wie bisher (gibt auch Drift zurück, MIT LÄNGE)
* DONE AccLatticeIterator lattice.at(pos); NEU, throw wenn pos in Driftstrecke
* DONE AccLatticeIterator lattice[name] ändern (jetzt schon mit throw)
* DONE AccTypeIterator Problem: template VS argument
  - template geht nicht mit Variable (madxMisalignments)
  - range-loop benötigt begin() ohne argument
  -> range-loop für TypeIterator funtioniert eh nicht, wenn AccElement zurückgegeben wird
  -> template bleibt, Variable geht alternativ über AccIterator::begin(type) & AccIterator::next(type)
* DONE Altlasten aufräumen
* TODO avoid 4x duplication in AccLattice by loop over non-const it with comparison to const it result
* TODO test convert AccIterator -> const_AccIterator
* TODO nicer const/non-const template with bool (http://www.sj-vs.net/c-implementing-const_iterator-and-non-const-iterator-without-code-duplication/)
* TODO lib Funktionalität widerherstellen
* TODO polematrix Funktionalität widerherstellen
